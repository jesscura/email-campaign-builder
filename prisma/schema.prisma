// Email Campaign Marketing SaaS Platform - Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Use DATABASE_URL for local dev, falls back to POSTGRES_PRISMA_URL for Vercel
  url       = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  
  // Subscription & billing
  planId        String?
  plan          Plan?     @relation(fields: [planId], references: [id])
  stripeCustomerId String? @unique
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  subscriptionId String?
  currentPeriodEnd DateTime?
  
  // Usage tracking
  emailsSentThisMonth Int @default(0)
  subscribersCount    Int @default(0)
  campaignsCount      Int @default(0)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  audiences     Audience[]
  segments      Segment[]
  automations   Automation[]
  templates     Template[]
  apiKeys       ApiKey[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  name      String
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ============================================
// SUBSCRIPTION & BILLING
// ============================================

model Plan {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Float
  interval          String   // 'month' or 'year'
  stripePriceId     String?  @unique
  
  // Feature limits
  emailsPerMonth    Int
  maxSubscribers    Int
  maxCampaigns      Int
  hasAutomation     Boolean  @default(false)
  hasAIFeatures     Boolean  @default(false)
  hasAdvancedAnalytics Boolean @default(false)
  hasTeamAccess     Boolean  @default(false)
  maxTeamMembers    Int      @default(1)
  
  // Metadata
  isActive          Boolean  @default(true)
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  users             User[]

  @@map("plans")
}

// ============================================
// CAMPAIGNS & EMAIL MANAGEMENT
// ============================================

model Campaign {
  id              String         @id @default(cuid())
  userId          String
  name            String
  subject         String
  preheader       String?
  fromName        String
  fromEmail       String
  replyTo         String?
  
  // Content
  htmlContent     String?
  mjmlContent     String?
  jsonContent     String?        // Builder JSON
  
  // Status & scheduling
  status          CampaignStatus @default(DRAFT)
  scheduledAt     DateTime?
  sentAt          DateTime?
  
  // A/B Testing
  isABTest        Boolean        @default(false)
  abTestVariants  Json?
  
  // Targeting
  audienceId      String?
  segmentIds      String[]
  
  // Tracking
  totalSent       Int            @default(0)
  totalOpens      Int            @default(0)
  totalClicks     Int            @default(0)
  totalBounces    Int            @default(0)
  totalUnsubscribes Int          @default(0)
  totalComplaints Int            @default(0)
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  audience        Audience?      @relation(fields: [audienceId], references: [id])
  events          CampaignEvent[]
  links           CampaignLink[]

  @@map("campaigns")
}

model CampaignEvent {
  id          String    @id @default(cuid())
  campaignId  String
  subscriberId String?
  eventType   EventType
  email       String?
  ipAddress   String?
  userAgent   String?
  linkId      String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  link        CampaignLink? @relation(fields: [linkId], references: [id])

  @@index([campaignId, eventType])
  @@index([subscriberId])
  @@map("campaign_events")
}

model CampaignLink {
  id          String    @id @default(cuid())
  campaignId  String
  url         String
  shortCode   String    @unique
  clicks      Int       @default(0)
  createdAt   DateTime  @default(now())
  
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  events      CampaignEvent[]

  @@map("campaign_links")
}

// ============================================
// AUDIENCE & SUBSCRIBER MANAGEMENT
// ============================================

model Audience {
  id          String      @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Metadata
  subscribersCount Int      @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribers Subscriber[]
  segments    Segment[]
  campaigns   Campaign[]

  @@map("audiences")
}

model Subscriber {
  id          String   @id @default(cuid())
  audienceId  String
  email       String
  firstName   String?
  lastName    String?
  phone       String?
  
  // Status
  status      SubscriberStatus @default(ACTIVE)
  unsubscribedAt DateTime?
  
  // Custom fields
  customFields Json?
  tags        String[]
  
  // Engagement metrics
  totalSent   Int      @default(0)
  totalOpens  Int      @default(0)
  totalClicks Int      @default(0)
  lastOpenedAt DateTime?
  lastClickedAt DateTime?
  
  // Metadata
  source      String?
  ipAddress   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  audience    Audience @relation(fields: [audienceId], references: [id], onDelete: Cascade)

  @@unique([audienceId, email])
  @@index([email])
  @@map("subscribers")
}

model Segment {
  id          String   @id @default(cuid())
  userId      String
  audienceId  String
  name        String
  description String?
  
  // Segmentation rules
  conditions  Json
  
  // Metadata
  subscribersCount Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  audience    Audience @relation(fields: [audienceId], references: [id], onDelete: Cascade)

  @@map("segments")
}

// ============================================
// AUTOMATION & WORKFLOWS
// ============================================

model Automation {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Configuration
  trigger     Json             // Trigger conditions
  actions     Json             // Workflow actions
  
  // Status
  isActive    Boolean          @default(false)
  
  // Metrics
  totalTriggered Int           @default(0)
  totalCompleted Int           @default(0)
  
  // Timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  lastRunAt   DateTime?
  
  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  runs        AutomationRun[]

  @@map("automations")
}

model AutomationRun {
  id           String   @id @default(cuid())
  automationId String
  subscriberId String?
  status       String
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  error        String?
  
  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@map("automation_runs")
}

// ============================================
// TEMPLATES
// ============================================

model Template {
  id          String   @id @default(cuid())
  userId      String?
  name        String
  description String?
  thumbnail   String?
  category    String?
  tags        String[]
  
  // Content
  htmlContent String?
  mjmlContent String?
  jsonContent String?
  
  // Metadata
  isPublic    Boolean  @default(false)
  isPremium   Boolean  @default(false)
  timesUsed   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("templates")
}

// ============================================
// ANALYTICS & REPORTING
// ============================================

model AnalyticsSnapshot {
  id              String   @id @default(cuid())
  date            DateTime @unique
  
  // User metrics
  totalUsers      Int      @default(0)
  activeUsers     Int      @default(0)
  newUsers        Int      @default(0)
  
  // Campaign metrics
  totalCampaigns  Int      @default(0)
  sentCampaigns   Int      @default(0)
  emailsSent      Int      @default(0)
  
  // Engagement metrics
  totalOpens      Int      @default(0)
  totalClicks     Int      @default(0)
  totalBounces    Int      @default(0)
  totalUnsubscribes Int    @default(0)
  
  // Revenue metrics
  totalRevenue    Float    @default(0)
  newSubscriptions Int     @default(0)
  churnedSubscriptions Int @default(0)
  
  createdAt       DateTime @default(now())

  @@map("analytics_snapshots")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  USER
  ADMIN
  STAFF
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELED
}

enum EventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  COMPLAINED
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}
